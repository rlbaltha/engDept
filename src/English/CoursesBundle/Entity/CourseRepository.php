<?php

namespace English\CoursesBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CourseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CourseRepository extends EntityRepository
{

    /**
     * queries for upper by area course listing
     *
     */
    public function upperbyarea($term, $area)
    {
        return $this->createQueryBuilder('c')
            ->where('c.term = :term')
            ->andWhere('c.area = :area')
            ->setParameter('term', $term)
            ->setParameter('area', $area)
            ->orderBy('c.area, c.courseName')
            ->getQuery()
            ->getResult();

    }

    public function findByCallTerm($call, $term) {
        return $this->createQueryBuilder('c')
            ->where("c.callNumber LIKE :call and  c.term = :term")
            ->setParameter('call', $call)
            ->setParameter('term', $term)
            ->getQuery()
            ->getResult();
    }


    public function findCourses($courseName, $term)
    {
        return $this->createQueryBuilder('c')
            ->select('c.courseName,c.title,c.instructorName,c.callNumber,c.callNumber2,c.days,c.time,c.id,c.term,c.building,c.room,c.may,c.max,t.termName,c.summerterm')
            ->join('EnglishTermBundle:Term', 't')
            ->where('c.term = t.term')
            ->andWhere('(LOWER(c.courseName) LIKE :courseName OR LOWER(c.instructorName) LIKE :courseName OR LOWER(c.title) LIKE :courseName) and c.term =
            :term')
            ->setParameter('courseName', $courseName)
            ->setParameter('term', $term)
            ->getQuery()
            ->getResult();

    }

    public function findAllCourses($courseName)
    {
        return $this->createQueryBuilder('c')
            ->select('c.courseName,c.title,c.instructorName,c.callNumber,c.callNumber2,c.days,c.time,c.id,c.term,c.building,c.room,c.may,c.max,t.termName,c.summerterm')
            ->join('EnglishTermBundle:Term', 't')
            ->where('c.term = t.term')
            ->andwhere('LOWER(c.courseName) LIKE :courseName OR LOWER(c.instructorName) LIKE :courseName OR LOWER(c.title) LIKE :courseName')
            ->setParameter('courseName', $courseName)
            ->orderBy('c.term', 'DESC')
            ->addOrderBy('c.courseName', "ASC")
            ->getQuery()
            ->getResult();

    }

    public function findCoursesByType($term, $type)
    {
        if ($type == 'Upper') {
            $andwhere ="c.area IN ('1','2','3','4','5')";
        } elseif ($type == 'FYC') {
            $andwhere ="c.courseName LIKE 'ENGL1%'";
        } elseif ($type == 'Surveys') {
            $andwhere = "c.courseName LIKE 'ENGL2%'";
        } elseif ($type == 'Graduate') {
            $andwhere = "c.courseName LIKE 'ENGL5%' or c.courseName LIKE 'ENGL6%' or c.courseName LIKE 'ENGL7%' or c.courseName LIKE 'ENGL8%' or c
                .courseName LIKE 'ENGL9%'";
        };

        $courses = $this->createQueryBuilder('c')
            ->select('c.courseName,c.title,c.instructorName,c.callNumber,c.callNumber2,c.days,c.time,c.id,c.term,c.building,c.room,c.may,c.max,t.termName,c.summerterm')
            ->join('EnglishTermBundle:Term', 't')
            ->where('c.term = t.term')
            ->andWhere('c.term = :term')
            ->andWhere($andwhere)
            ->setParameter('term', $term)
            ->orderBy('c.courseName', "ASC")
            ->getQuery()
            ->getResult();

        return $courses;

    }


}

